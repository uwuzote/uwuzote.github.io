const c=(e,t)=>[e+"1",e+"2",t,t],_apl=(e,t)=>typeof e=="string"?t(e):e.map(t),_pref=(e,t)=>_apl(e,e=>t+e),concat=(e,t="/")=>typeof e=="string"?e:e.join(t),div=(e,t)=>(e-e%t)/t;export const CASES={nom:["n1","w1","","t"],gen:["w1","g2","n","n"],par:c("p",""),ine:c("w","ssA"),ela:c("w","stA"),ill:c("i","n"),ade:c("w","llA"),abl:c("w","ltA"),all:c("w","lle"),ess:c("s","nA"),tra:c("w","ksi"),abe:c("w","ttA"),ins:c("w","n"),com:c("s","ne")};export const mkSimple=(e,t,n,s,o,i,a,r,c,l,d,u="")=>({a:e,n1:_pref(t,u),w1:_pref(n,u),s1:_pref(s,u),w2:_pref(o,u),s2:_pref(i,u),p1:_pref(a,u),p2:_pref(r,u),g2:_pref(c,u),i1:_pref(l,u),i2:_pref(d,u),check:null,decline(e,t){const n=this.check?.(e,t);if(n!=null)return n;if((e===CASES.com||e===CASES.ins)&&t===1)return[];const s=e[2+t-1].replace("A",this.a);return _apl(this[e[t-1]],e=>e.endsWith("*")?e.slice(0,e.length-1)+s+"*":e+s)},as_part(){return{...this,n1:this.p1}},no_part(){const e=this;return{...e,as_part(){return e}}}});export const mkStr=e=>({form:e,decline(){return this.form},as_part(){return this},no_part(){return this}});export const EMPTY_SIMPLE=mkStr("");export const mkComplex=(e,t="")=>({parts:e,sep:t,decline(e,t){let n=[];for(let s of this.parts)typeof s=="string"?s!=""&&n.push(s):s!=EMPTY_SIMPLE&&n.push(concat(s.decline(e,t)));return n.join(this.sep)}});const format_power=e=>{const n="⁰¹²³⁴⁵⁶⁷⁸⁹";let t=e+"";for(let e=0;e<10;e+=1)t=t.replace(e,n[e]);return mkStr("10"+t)};export const mkGenerator=e=>{const n=(t,n=EMPTY_SIMPLE,s=!1)=>{let o=(s?e[t+"-small"]:null)??e[t];return t==0?[]:t==1?n==EMPTY_SIMPLE?[o]:[n]:[o,n.as_part()]},t=(t,s=EMPTY_SIMPLE,o=!1)=>t<10?n(t,s,o):t==10?[e[10],s.as_part()]:t<20?[e[t-10],e["1x"],s.as_part()]:[e[div(t,10)],e[10].as_part(),...n(t%10,EMPTY_SIMPLE,o),s.as_part()],s=(n,s=EMPTY_SIMPLE,o=!1)=>n<100?t(n,s,o):n<200?[e[100],...t(n%100,EMPTY_SIMPLE,o&&s==EMPTY_SIMPLE),s.as_part()]:[e[div(n,100)],e[100].as_part(),...t(n%100,EMPTY_SIMPLE,o&&s==EMPTY_SIMPLE),s.as_part()],o=(t,n=!1)=>{let o=!0,i=[];for(let a=0;t.length>0;a+=1){const r=+t.slice(Math.max(0,t.length-3));t=t.slice(0,Math.max(0,t.length-3));const c=e.ROW[a]??format_power(a*3);r!=0&&(o=!1,i.push(s(r,c,n&&a==0)))}return o?[e[0]]:i.reverse().flat()};return o};export const KOTUS={koira(e,t,n=!1){return mkSimple(t,n?t+"n":t,t,t,"i","i",t+t,"i"+t,["ie",t+"i*"],t+t,"ii",e)},käsi(e,t){return mkSimple(t,"si","de","te","si","si","tt"+t,"si"+t,["sie","tte*"],"tee","sii",e)},kaksi(e,t){return mkSimple(t,"ksi","hde","hte","ksi","ksi","ht"+t,"ksi"+t,"ksie","htee","ksii",e)},nainen(e,t){return mkSimple(t,"nen","se","se","si","si","st"+t,"si"+t,["ste","sie"],"see","sii",e)},kahdeksas(e,t){return mkSimple(t,"s","nne","nte","nsi","nsi","tt"+t,"nsi"+t,"nsie","ntee","nsii",e)}};export const CARDINALS={0:KOTUS.koira("noll","a"),1:KOTUS.kaksi("y","ä"),2:KOTUS.kaksi("ka","a"),3:mkSimple("a","e","e","e","i","i","ea","ia","ie","ee","ii","kolm"),4:KOTUS.koira("nelj","ä"),5:KOTUS.käsi("vii","ä"),6:KOTUS.käsi("kuu","a"),7:KOTUS.koira("seitsem","ä",!0),8:KOTUS.koira("kahdeks","a",!0),9:KOTUS.koira("yhdeks","ä",!0),10:mkSimple("ä","en","e","e","i","i","tä","iä",["ie","te"],"ee","ii","kymmen"),"1x":mkStr("toista"),100:mkSimple("a","ta","da","ta","doi","toi","taa","toja",["toje","tai*"],"taa","toihi","sa"),ROW:[EMPTY_SIMPLE,mkSimple("a","t","nne","nte","nsi","nsi","tta","nsia",["nsie","nte*"],"ntee","nsii","tuha"),KOTUS.koira("miljoon","a"),mkSimple("a","i","i","i","ei","ei","ia","eja","ie","ii","eihi","miljard"),KOTUS.koira("biljoon","a"),mkSimple("a","i","i","i","ei","ei","ia",["eita","eja"],["ie","eide","eitte"],"ii","eihi","biljard")]};CARDINALS[4].check=(e,t)=>e==CASES.ins&&t==2?["nelin","neljin"]:null;export const ORDINALS={1:KOTUS.kahdeksas("yhde","ä"),"1-small":KOTUS.nainen("ensimmäi","ä"),2:KOTUS.kahdeksas("kahde","a"),"2-small":KOTUS.nainen("toi","a"),3:KOTUS.kahdeksas("kolma","a"),4:KOTUS.kahdeksas("neljä","ä"),5:KOTUS.kahdeksas("viide","ä"),6:KOTUS.kahdeksas("kuude","a"),7:KOTUS.kahdeksas("seitsemä","ä"),8:KOTUS.kahdeksas("kahdeksa","a"),9:KOTUS.kahdeksas("yhdeksä","ä"),10:KOTUS.kahdeksas("kymmene","ä").no_part(),"1x":mkStr("toista"),100:KOTUS.kahdeksas("sada","a").no_part(),ROW:[EMPTY_SIMPLE,KOTUS.kahdeksas("tuhanne","a"),KOTUS.kahdeksas("miljoona","a"),KOTUS.kahdeksas("miljardi","a"),KOTUS.kahdeksas("biljoona","a"),KOTUS.kahdeksas("biljardi","a")].map(e=>e.no_part())}